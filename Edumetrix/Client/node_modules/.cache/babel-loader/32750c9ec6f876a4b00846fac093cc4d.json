{"ast":null,"code":"let validateResult = {\n  error: \"\",\n  result: false\n};\nconst regex = /[a-zA-Z0-9]+[\\.]?([a-zA-Z0-9]+)?[\\@][a-z]{3,9}[\\.][a-z]{2,5}/;\n\nclass Validations {\n  emailValidation(email) {\n    if (email === \"\") {\n      validateResult.error = \"field should not be empty *\";\n      validateResult.result = true;\n    } else if (regex.test(email) === false) {\n      validateResult.error = \"wrong Email please enter valid email*\";\n      validateResult.result = true;\n    }\n\n    return validateResult;\n  }\n\n  passwordValidation(password) {\n    if (password === \"\") {\n      validateResult.error = \"password should not be empty*\";\n      validateResult.result = true;\n    }\n\n    return validateResult;\n  }\n\n  username(username) {\n    if (username.length < 2) {\n      validateResult.error = \"user name should be minimum 2 characters*\";\n      validateResult.result = true;\n    } else if (username === \"\") {\n      validateResult.error = \"field should not be empty*\";\n      validateResult.result = true;\n    }\n\n    return validateResult;\n  }\n\n}\n\nexport default Validations;","map":{"version":3,"sources":["/home/kapil/Desktop/Edumetrix/edumetrix/src/Utility/validations.js"],"names":["validateResult","error","result","regex","Validations","emailValidation","email","test","passwordValidation","password","username","length"],"mappings":"AAAA,IAAIA,cAAc,GAAG;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,MAAM,EAAE;AAHS,CAArB;AAMA,MAAMC,KAAK,GAAG,8DAAd;;AAGA,MAAMC,WAAN,CAAkB;AAEdC,EAAAA,eAAe,CAACC,KAAD,EAAQ;AAEnB,QAAIA,KAAK,KAAK,EAAd,EAAkB;AAEdN,MAAAA,cAAc,CAACC,KAAf,GAAuB,6BAAvB;AACAD,MAAAA,cAAc,CAACE,MAAf,GAAwB,IAAxB;AACH,KAJD,MAIO,IAAIC,KAAK,CAACI,IAAN,CAAWD,KAAX,MAAsB,KAA1B,EAAiC;AAEpCN,MAAAA,cAAc,CAACC,KAAf,GAAuB,uCAAvB;AACAD,MAAAA,cAAc,CAACE,MAAf,GAAwB,IAAxB;AACH;;AACD,WAAOF,cAAP;AAEH;;AAEDQ,EAAAA,kBAAkB,CAACC,QAAD,EAAW;AAEzB,QAAIA,QAAQ,KAAK,EAAjB,EAAqB;AACjBT,MAAAA,cAAc,CAACC,KAAf,GAAuB,+BAAvB;AACAD,MAAAA,cAAc,CAACE,MAAf,GAAwB,IAAxB;AACH;;AACD,WAAOF,cAAP;AACH;;AACDU,EAAAA,QAAQ,CAACA,QAAD,EAAU;AACd,QAAGA,QAAQ,CAACC,MAAT,GAAgB,CAAnB,EAAqB;AACjBX,MAAAA,cAAc,CAACC,KAAf,GAAuB,2CAAvB;AACAD,MAAAA,cAAc,CAACE,MAAf,GAAwB,IAAxB;AACH,KAHD,MAGM,IAAGQ,QAAQ,KAAK,EAAhB,EAAmB;AACrBV,MAAAA,cAAc,CAACC,KAAf,GAAuB,4BAAvB;AACAD,MAAAA,cAAc,CAACE,MAAf,GAAwB,IAAxB;AACH;;AACD,WAAOF,cAAP;AACH;;AAlCa;;AAqClB,eAAeI,WAAf","sourcesContent":["let validateResult = {\n\n    error: \"\",\n    result: false\n}\n\nconst regex = /[a-zA-Z0-9]+[\\.]?([a-zA-Z0-9]+)?[\\@][a-z]{3,9}[\\.][a-z]{2,5}/\n\n\nclass Validations {\n\n    emailValidation(email) {\n\n        if (email === \"\") {\n\n            validateResult.error = \"field should not be empty *\"\n            validateResult.result = true\n        } else if (regex.test(email) === false) {\n\n            validateResult.error = \"wrong Email please enter valid email*\"\n            validateResult.result = true\n        }\n        return validateResult\n\n    }\n\n    passwordValidation(password) {\n\n        if (password === \"\") {\n            validateResult.error = \"password should not be empty*\"\n            validateResult.result = true\n        }\n        return validateResult\n    }\n    username(username){\n        if(username.length<2){\n            validateResult.error = \"user name should be minimum 2 characters*\"\n            validateResult.result = true\n        }else if(username === \"\"){\n            validateResult.error = \"field should not be empty*\"\n            validateResult.result = true\n        }\n        return validateResult\n    }\n}\n\nexport default Validations"]},"metadata":{},"sourceType":"module"}