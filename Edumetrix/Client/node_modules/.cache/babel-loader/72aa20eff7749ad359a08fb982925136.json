{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _cramda = require('cramda');\n\nvar _cramda2 = _interopRequireDefault(_cramda);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar first = _cramda2.default.first,\n    tail = _cramda2.default.tail;\n\nfunction formatNumber(text, pattern, autoFormat) {\n  if (!text || text.length === 0) {\n    return '+';\n  } // for all strings with length less than 3, just return it (1, 2 etc.)\n  // also return the same text if the selected country has no fixed format\n\n\n  if (text && text.length < 2 || !pattern || !autoFormat) {\n    return '+' + text;\n  }\n\n  var formattedObject = pattern.split('').reduce(function (acc, character) {\n    if (acc.remainingText.length === 0) {\n      return acc;\n    }\n\n    if (character !== '.') {\n      return {\n        formattedText: acc.formattedText + character,\n        remainingText: acc.remainingText\n      };\n    }\n\n    return {\n      formattedText: acc.formattedText + first(acc.remainingText),\n      remainingText: tail(acc.remainingText)\n    };\n  }, {\n    formattedText: '',\n    remainingText: text.split('')\n  });\n  return formattedObject.formattedText + formattedObject.remainingText.join('');\n}\n\nexports.default = formatNumber;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/home/edumetrix/Desktop/Edumetrix2/Edumetrix/Client/node_modules/react-telephone-input/lib/format_number.js"],"names":["exports","__esModule","_cramda","require","_cramda2","_interopRequireDefault","obj","default","first","tail","formatNumber","text","pattern","autoFormat","length","formattedObject","split","reduce","acc","character","remainingText","formattedText","join","module"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,QAAD,CAArB;;AAEA,IAAIC,QAAQ,GAAGC,sBAAsB,CAACH,OAAD,CAArC;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAEC,IAAAA,OAAO,EAAED;AAAX,GAArC;AAAwD;;AAE/F,IAAIE,KAAK,GAAGJ,QAAQ,CAACG,OAAT,CAAiBC,KAA7B;AAAA,IACIC,IAAI,GAAGL,QAAQ,CAACG,OAAT,CAAiBE,IAD5B;;AAIA,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,OAA5B,EAAqCC,UAArC,EAAiD;AAC/C,MAAI,CAACF,IAAD,IAASA,IAAI,CAACG,MAAL,KAAgB,CAA7B,EAAgC;AAC9B,WAAO,GAAP;AACD,GAH8C,CAK/C;AACA;;;AACA,MAAIH,IAAI,IAAIA,IAAI,CAACG,MAAL,GAAc,CAAtB,IAA2B,CAACF,OAA5B,IAAuC,CAACC,UAA5C,EAAwD;AACtD,WAAO,MAAMF,IAAb;AACD;;AAED,MAAII,eAAe,GAAGH,OAAO,CAACI,KAAR,CAAc,EAAd,EAAkBC,MAAlB,CAAyB,UAAUC,GAAV,EAAeC,SAAf,EAA0B;AACvE,QAAID,GAAG,CAACE,aAAJ,CAAkBN,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,aAAOI,GAAP;AACD;;AAED,QAAIC,SAAS,KAAK,GAAlB,EAAuB;AACrB,aAAO;AACLE,QAAAA,aAAa,EAAEH,GAAG,CAACG,aAAJ,GAAoBF,SAD9B;AAELC,QAAAA,aAAa,EAAEF,GAAG,CAACE;AAFd,OAAP;AAID;;AAED,WAAO;AACLC,MAAAA,aAAa,EAAEH,GAAG,CAACG,aAAJ,GAAoBb,KAAK,CAACU,GAAG,CAACE,aAAL,CADnC;AAELA,MAAAA,aAAa,EAAEX,IAAI,CAACS,GAAG,CAACE,aAAL;AAFd,KAAP;AAID,GAhBqB,EAgBnB;AAAEC,IAAAA,aAAa,EAAE,EAAjB;AAAqBD,IAAAA,aAAa,EAAET,IAAI,CAACK,KAAL,CAAW,EAAX;AAApC,GAhBmB,CAAtB;AAiBA,SAAOD,eAAe,CAACM,aAAhB,GAAgCN,eAAe,CAACK,aAAhB,CAA8BE,IAA9B,CAAmC,EAAnC,CAAvC;AACD;;AAEDtB,OAAO,CAACO,OAAR,GAAkBG,YAAlB;AACAa,MAAM,CAACvB,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _cramda = require('cramda');\n\nvar _cramda2 = _interopRequireDefault(_cramda);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar first = _cramda2.default.first,\n    tail = _cramda2.default.tail;\n\n\nfunction formatNumber(text, pattern, autoFormat) {\n  if (!text || text.length === 0) {\n    return '+';\n  }\n\n  // for all strings with length less than 3, just return it (1, 2 etc.)\n  // also return the same text if the selected country has no fixed format\n  if (text && text.length < 2 || !pattern || !autoFormat) {\n    return '+' + text;\n  }\n\n  var formattedObject = pattern.split('').reduce(function (acc, character) {\n    if (acc.remainingText.length === 0) {\n      return acc;\n    }\n\n    if (character !== '.') {\n      return {\n        formattedText: acc.formattedText + character,\n        remainingText: acc.remainingText\n      };\n    }\n\n    return {\n      formattedText: acc.formattedText + first(acc.remainingText),\n      remainingText: tail(acc.remainingText)\n    };\n  }, { formattedText: '', remainingText: text.split('') });\n  return formattedObject.formattedText + formattedObject.remainingText.join('');\n}\n\nexports.default = formatNumber;\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}