{"ast":null,"code":"let validateResult = {\n  error: \"\",\n  result: false\n};\nconst regex = /[a-zA-Z0-9]+[\\.]?([a-zA-Z0-9]+)?[\\@][a-z]{3,9}[\\.][a-z]{2,5}/;\nconst mobRegex = /^[0][1-9]\\d{9}$|^[1-9]\\d{9}$/;\n\nclass Validations {\n  constructor() {\n    this.mobileNovalidation = mobileNo => {\n      if (mobRegex.test(mobileNo) === false) {\n        validateResult.error = \"mobile number is not valid*\";\n        validateResult.result = true;\n      }\n\n      if (mobileNo === \"\") {\n        validateResult.error = \"field should not be empty*\";\n        validateResult.result = true;\n      }\n\n      return validateResult;\n    };\n  }\n\n  emailValidation(email) {\n    if (email === \"\") {\n      validateResult.error = \"field should not be empty *\";\n      validateResult.result = true;\n    } else if (regex.test(email) === false) {\n      validateResult.error = \"wrong Email please enter valid email*\";\n      validateResult.result = true;\n    }\n\n    return validateResult;\n  }\n\n  passwordValidation(password) {\n    console.log(\"password\", password);\n\n    if (password === \"\") {\n      validateResult.error = \"password should not be empty*\";\n      validateResult.result = true;\n    } else if (password.length < 8) {\n      validateResult.error = \"password should be at least 8 character*\";\n      validateResult.result = true;\n    }\n\n    return validateResult;\n  }\n\n  username(username) {\n    if (username.length < 2) {\n      validateResult.error = \"field should be minimum 2 characters*\";\n      validateResult.result = true;\n    }\n\n    return validateResult;\n  }\n\n}\n\nexport default Validations;","map":{"version":3,"sources":["/home/kapil/Desktop/Edumetrix/edumetrix/src/Utility/validations.js"],"names":["validateResult","error","result","regex","mobRegex","Validations","mobileNovalidation","mobileNo","test","emailValidation","email","passwordValidation","password","console","log","length","username"],"mappings":"AAAA,IAAIA,cAAc,GAAG;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,MAAM,EAAE;AAHS,CAArB;AAMA,MAAMC,KAAK,GAAG,8DAAd;AACA,MAAMC,QAAQ,GAAG,8BAAjB;;AAEA,MAAMC,WAAN,CAAkB;AAAA;AAAA,SA8BdC,kBA9Bc,GA8BQC,QAAD,IAAc;AAE/B,UAAIH,QAAQ,CAACI,IAAT,CAAcD,QAAd,MAA4B,KAAhC,EAAuC;AACnCP,QAAAA,cAAc,CAACC,KAAf,GAAuB,6BAAvB;AACAD,QAAAA,cAAc,CAACE,MAAf,GAAwB,IAAxB;AACH;;AACD,UAAGK,QAAQ,KAAK,EAAhB,EAAmB;AACfP,QAAAA,cAAc,CAACC,KAAf,GAAuB,4BAAvB;AACAD,QAAAA,cAAc,CAACE,MAAf,GAAwB,IAAxB;AACH;;AACD,aAAOF,cAAP;AACH,KAzCa;AAAA;;AAEdS,EAAAA,eAAe,CAACC,KAAD,EAAQ;AAEnB,QAAIA,KAAK,KAAK,EAAd,EAAkB;AAEdV,MAAAA,cAAc,CAACC,KAAf,GAAuB,6BAAvB;AACAD,MAAAA,cAAc,CAACE,MAAf,GAAwB,IAAxB;AACH,KAJD,MAIO,IAAIC,KAAK,CAACK,IAAN,CAAWE,KAAX,MAAsB,KAA1B,EAAiC;AAEpCV,MAAAA,cAAc,CAACC,KAAf,GAAuB,uCAAvB;AACAD,MAAAA,cAAc,CAACE,MAAf,GAAwB,IAAxB;AACH;;AACD,WAAOF,cAAP;AAEH;;AAEDW,EAAAA,kBAAkB,CAACC,QAAD,EAAW;AAEzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,QAAxB;;AAEA,QAAIA,QAAQ,KAAK,EAAjB,EAAqB;AACjBZ,MAAAA,cAAc,CAACC,KAAf,GAAuB,+BAAvB;AACAD,MAAAA,cAAc,CAACE,MAAf,GAAwB,IAAxB;AACH,KAHD,MAGO,IAAIU,QAAQ,CAACG,MAAT,GAAkB,CAAtB,EAAyB;AAC5Bf,MAAAA,cAAc,CAACC,KAAf,GAAuB,0CAAvB;AACAD,MAAAA,cAAc,CAACE,MAAf,GAAwB,IAAxB;AACH;;AACD,WAAOF,cAAP;AACH;;AAcDgB,EAAAA,QAAQ,CAACA,QAAD,EAAW;AACf,QAAIA,QAAQ,CAACD,MAAT,GAAkB,CAAtB,EAAyB;AACrBf,MAAAA,cAAc,CAACC,KAAf,GAAuB,uCAAvB;AACAD,MAAAA,cAAc,CAACE,MAAf,GAAwB,IAAxB;AACH;;AACD,WAAOF,cAAP;AACH;;AAjDa;;AAoDlB,eAAeK,WAAf","sourcesContent":["let validateResult = {\n\n    error: \"\",\n    result: false\n}\n\nconst regex = /[a-zA-Z0-9]+[\\.]?([a-zA-Z0-9]+)?[\\@][a-z]{3,9}[\\.][a-z]{2,5}/\nconst mobRegex = /^[0][1-9]\\d{9}$|^[1-9]\\d{9}$/\n\nclass Validations {\n\n    emailValidation(email) {\n\n        if (email === \"\") {\n\n            validateResult.error = \"field should not be empty *\"\n            validateResult.result = true\n        } else if (regex.test(email) === false) {\n\n            validateResult.error = \"wrong Email please enter valid email*\"\n            validateResult.result = true\n        }\n        return validateResult\n\n    }\n\n    passwordValidation(password) {\n\n        console.log(\"password\", password);\n\n        if (password === \"\") {\n            validateResult.error = \"password should not be empty*\"\n            validateResult.result = true\n        } else if (password.length < 8) {\n            validateResult.error = \"password should be at least 8 character*\"\n            validateResult.result = true\n        }\n        return validateResult\n    }\n    mobileNovalidation = (mobileNo) => {\n\n        if (mobRegex.test(mobileNo) === false) {\n            validateResult.error = \"mobile number is not valid*\"\n            validateResult.result = true\n        }\n        if(mobileNo === \"\"){\n            validateResult.error = \"field should not be empty*\"\n            validateResult.result = true\n        }\n        return validateResult\n    }\n\n    username(username) {\n        if (username.length < 2) {\n            validateResult.error = \"field should be minimum 2 characters*\"\n            validateResult.result = true\n        }\n        return validateResult\n    }\n}\n\nexport default Validations"]},"metadata":{},"sourceType":"module"}